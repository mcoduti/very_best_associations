<head>
    <canvas id="game"></canvas>

    <style>
      *{ margin: 0px; padding: 0px; }
      canvas{ display: block; margin: 0px auto; border: 1px solid #000;}
    </style>

<script>


//Hirigana
//[["あ","a",0,0],["い","i",0,0],["う","u",0,0],["え","e",0,0],["お","o",0,0]]
//[["か","ka",0,0],["き","ki",0,0],["く","ku",0,0],["け","ke",0,0],["こ","ko",0,0]]
//[["が","ga",0,0],["ぎ","gi",0,0],["ぐ","gu",0,0],["げ","ge",0,0],["ご","go",0,0]]
//[["さ","sa",0,0],["し","shi",0,0],["す","su",0,0],["せ","se",0,0],["そ","so",0,0]]
//[["ざ","za",0,0],["じ","ji",0,0],["ず","zu",0,0],["ぜ","ze",0,0],["ぞ","zo",0,0]]
//[["た","ta",0,0],["ち","chi",0,0],["つ","tsu",0,0],["て","te",0,0],["と","to",0,0]]
//[["だ","da",0,0],["ぢ","ji",0,0],["づ","zu",0,0],["で","de",0,0],["ど", "do",0,0]]
//[["な","na",0,0],["に","ni",0,0],["ぬ","nu",0,0],["ね","ne",0,0],["の","no",0,0]]
//[["は","ha",0,0],["ひ","hi",0,0],["ふ","fu",0,0],["へ","he",0,0],["ほ","ho",0,0]]
//[["ば","ba",0,0],["び","bi",0,0],["ぶ","bu",0,0],["べ","be",0,0],["ぼ","bo",0,0]]
//[["ぱ","pa",0,0],["ぴ","pi",0,0],["ぷ","pu",0,0],["ぺ","pe",0,0],["ぽ","po",0,0]]
//[["ま","ma",0,0],["み","mi",0,0],["む","mu",0,0],["め","me",0,0],["も","mo",0,0]]
//[["や","ya",0,0],["ゆ","yu",0,0],["よ","yo",0,0]]
//[["ら","ra",0,0],["り","ri",0,0],["る","ru",0,0],["れ","re",0,0],["ろ","ro",0,0]]
//[["わ","wa",0,0],["を","wo",0,0],["ん","n/m",0,0]]
//[["きゃ","kya",0,0],["きゅ","kyu",0,0],["きょ","kyo",0,0]]
//[["ぎゃ,"gya",0,0],["ぎゅ","gyu",0,0],["ぎょ","gyo",0,0]]
//[["しゃ","sha",0,0],["しゅ","shu",0,0],["しょ","sho",0,0]]
//[["じゃ","ja",0,0],["じゅ","ju",0,0],["じょ","jo",0,0]]
//[["ちゃ","cha",0,0],["ちゅ","chu",0,0],["ちょ","cho",0,0]]
//[["にゃ","nya",0,0],["にゅ","nyu",0,0],["にょ","nyo",0,0]]
//[["ひゃ","hya",0,0],["ひゅ","hyu",0,0],["ひょ ","hyo",0,0]]
//[["びゃ","bya",0,0],["びゅ","byu",0,0],["びょ","byo",0,0]]
//[["ぴゃ","pya",0,0],["ぴゅ","pyu",0,0],["ぴょ","pyo",0,0]]
//[["みゃ","mya",0,0],["みゅ","myu",0,0],["みょ","myo",0,0]]
//[["りゃ","rya",0,0],["りゅ","ryu",0,0],["りょ","ryo",0,0]]

var hirigana = [["あ","a",0,0,"id"],["い","i",0,0,"id"],["う","u",0,0,"id"],["え","e",0,0,"id"],["お","o",0,0,"id"],
    ["か","ka",0,0,"id"],["き","ki",0,0,"id"],["く","ku",0,0,"id"],["け","ke",0,0,"id"],["こ","ko",0,0,"id"],
    ["が","ga",0,0,"id"],["ぎ","gi",0,0,"id"],["ぐ","gu",0,0,"id"],["げ","ge",0,0,"id"],["ご","go",0,0,"id"],
    ["さ","sa",0,0,"id"],["し","shi",0,0,"id"],["す","su",0,0,"id"],["せ","se",0,0,"id"],["そ","so",0,0,"id"],
    ["ざ","za",0,0,"id"],["じ","ji",0,0,"id"],["ず","zu",0,0,"id"],["ぜ","ze",0,0,"id"],["ぞ","zo",0,0,"id"],
    ["た","ta",0,0,"id"],["ち","chi",0,0,"id"],["つ","tsu",0,0,"id"],["て","te",0,0,"id"],["と","to",0,0,"id"],
    ["だ","da",0,0,"id"],["ぢ","ji",0,0,"id"],["づ","zu",0,0,"id"],["で","de",0,0,"id"],["ど", "do",0,0,"id"],
    ["な","na",0,0,"id"],["に","ni",0,0,"id"],["ぬ","nu",0,0,"id"],["ね","ne",0,0,"id"],["の","no",0,0,"id"],
    ["は","ha",0,0,"id"],["ひ","hi",0,0,"id"],["ふ","fu",0,0,"id"],["へ","he",0,0,"id"],["ほ","ho",0,0,"id"],
    ["ば","ba",0,0,"id"],["び","bi",0,0,"id"],["ぶ","bu",0,0,"id"],["べ","be",0,0,"id"],["ぼ","bo",0,0,"id"],
    ["ぱ","pa",0,0,"id"],["ぴ","pi",0,0,"id"],["ぷ","pu",0,0,"id"],["ぺ","pe",0,0,"id"],["ぽ","po",0,0,"id"],
    ["ま","ma",0,0,"id"],["み","mi",0,0,"id"],["む","mu",0,0,"id"],["め","me",0,0,"id"],["も","mo",0,0,"id"],
    ["や","ya",0,0,"id"],["ゆ","yu",0,0,"id"],["よ","yo",0,0,"id"],
    ["ら","ra",0,0,"id"],["り","ri",0,0,"id"],["る","ru",0,0,"id"],["れ","re",0,0,"id"],["ろ","ro",0,0,"id"],
    ["わ","wa",0,0,"id"],["を","wo",0,0,"id"],["ん","n/m",0,0,"id"],
    ["きゃ","kya",0,0,"id"],["きゅ","kyu",0,0,"id"],["きょ","kyo",0,0,"id"],
    ["ぎゃ","gya",0,0,"id"],["ぎゅ","gyu",0,0,"id"],["ぎょ","gyo",0,0,"id"],
    ["しゃ","sha",0,0,"id"],["しゅ","shu",0,0,"id"],["しょ","sho",0,0,"id"],
    ["じゃ","ja",0,0,"id"],["じゅ","ju",0,0,"id"],["じょ","jo",0,0,"id"],
    ["ちゃ","cha",0,0,"id"],["ちゅ","chu",0,0,"id"],["ちょ","cho",0,0,"id"],
    ["にゃ","nya",0,0,"id"],["にゅ","nyu",0,0,"id"],["にょ","nyo",0,0,"id"],
    ["ひゃ","hya",0,0,"id"],["ひゅ","hyu",0,0,"id"],["ひょ ","hyo",0,0,"id"],
    ["びゃ","bya",0,0,"id"],["びゅ","byu",0,0,"id"],["びょ","byo",0,0,"id"],
    ["ぴゃ","pya",0,0,"id"],["ぴゅ","pyu",0,0,"id"],["ぴょ","pyo",0,0,"id"],
    ["みゃ","mya",0,0,"id"],["みゅ","myu",0,0,"id"],["みょ","myo",0,0,"id"],
    ["りゃ","rya",0,0,"id"],["りゅ","ryu",0,0,"id"],["りょ","ryo",0,0,"id"]];

//
//select random index to be used as question
//save to question variable
//select 2 additional indices
//make array of question answer and two additional answers
//randomize two additional answers


var result = "default";
charArray =[["あ","a",0,0],["い","i",0,0],["う","u",0,0],["え","e",0,0],["お","o",0,0],["か","ka",0,0],["き","ki",0,0],["く","ku",0,0],["け","ke",0,0],["こ","ko",0,0]];

function CreateQ(array) {
  var orderArray = [];
  var answerArray = [];
  var question = [];
  var jAnswers = [];
  var jAnswerValues = [];
  for(i = 0; i < array.length; i++) {
    orderArray.push(i);
  }
  for(i = 0; i<3; i++){
    val1 = Math.floor((Math.random() * orderArray.length));
    answerArray.push(orderArray[val1]);
    orderArray.splice(val1,1);
  }
  question.push(array[answerArray[0]]);
  var orderArray2 = [];
  for(i = 0; i < answerArray.length; i++) {
    orderArray2.push(i);
  }
  for(i = 0; i<answerArray.length; i++){
    val1 = Math.floor((Math.random() * orderArray2.length));
    jAnswers.push(orderArray2[val1]);
    orderArray2.splice(val1,1);
  }
  jAnswerValues.push(array[answerArray[jAnswers[0]]]);
  jAnswerValues.push(array[answerArray[jAnswers[1]]]);
  jAnswerValues.push(array[answerArray[jAnswers[2]]]);
  return [question, jAnswerValues];
}

var orderArray = [0,1];
orderArray = RandArr(orderArray);
demo2 = orderArray[0];
var gameOver = false;

demo = CreateQ(charArray);
//demo2 = demo[1][2][1];
var question = demo[0][0];
var questionDisplay = question[0][0];
//var question = demo[0][0][0];
var a1 = demo[1][0]
var a1Display = a1[1];
var a2 = demo[1][1];
var a2Display = a2[1];
var a3 = demo[1][2]
var a3Display = a3[1];
var response = "";
var textResponse = "";
var textResponse2 = "";
var bonusPoints= 0;



if (a1 == question) {
  check = "bingo";
}

var demo;
var Width = 800;

var Height = 450;

var canvas = document.getElementById("game");

canvas.width = Width;

canvas.height = Height;

canvas.setAttribute('tabindex', 1);

var ctx = canvas.getContext("2d");

var FPS = 1000 / 60;

var gameTimeStart;
var cardArray = [];
var mYcd;  //mouseYcoord
var mXcd;  //mouseXcoord
var counter = 0;
RectX = 50;
RectY = 50;
var keyIn;
var dragok = false;
var deck =  [[1,"h"],[2,"h"],[3,"h"],[4,"h"],[5,"h"],[6,"h"],[7,"h"],[8,"h"],[9,"h"],[10,"h"],[11,"h"],[12,"h"],[13,"h"],
    [1,"c"],[2,"c"],[3,"c"],[4,"c"],[5,"c"],[6,"c"],[7,"c"],[8,"c"],[9,"c"],[10,"c"],[11,"c"],[12,"c"],[13,"c"],
    [1,"d"],[2,"d"],[3,"d"],[4,"d"],[5,"d"],[6,"d"],[7,"d"],[8,"d"],[9,"d"],[10,"d"],[11,"d"],[12,"d"],[13,"d"],
    [1,"s"],[2,"s"],[3,"s"],[4,"s"],[5,"s"],[6,"s"],[7,"s"],[8,"s"],[9,"s"],[10,"s"],[11,"s"],[12,"s"],[13,"s"]/*,[1,"h"],[2,"h"],[3,"h"],[4,"h"],    [5,"h"],[6,"h"],[7,"h"],[8,"h"],[9,"h"],[10,"h"],[11,"h"],[12,"h"],[13,"h"],
    [1,"c"],[2,"c"],[3,"c"],[4,"c"],[5,"c"],[6,"c"],[7,"c"],[8,"c"],[9,"c"],[10,"c"],[11,"c"],[12,"c"],[13,"c"],
    [1,"d"],[2,"d"],[3,"d"],[4,"d"],[5,"d"],[6,"d"],[7,"d"],[8,"d"],[9,"d"],[10,"d"],[11,"d"],[12,"d"],[13,"d"],
    [1,"s"],[2,"s"],[3,"s"],[4,"s"],[5,"s"],[6,"s"],[7,"s"],[8,"s"],[9,"s"],[10,"s"],[11,"s"],[12,"s"],[13,"s"]*/]
var questionPool = [["あ","a"],["い","i"],["う","u"],["え","e"],["お","o"]]
//deck.sort(function() {return 0.5 - Math.random()});
var discard = [];
var drawnCard;
var dealerCard = "";
var bet;
var highLow = "";
var outcome = "";// = "blank";
var chips = 1000;
var multiplier = 1;
var gameState = "blank";  //could be resolve pt 1, resolve pt 2, etc
var check;
var gameHistory = [];
var a1State = "off";
var a2State = "off";
var a3State = "off";
var power = 100;
var adjusted = "";
var dealerCardX = 200;
var highLowX = 200;
var answerScreen = true;
var answerState;// = false;
var questionFilter = true;
var questionState;// = true;
var splitMasterA = [];
var easyArray = [];   //[["は","ha",0,0],["ひ","hi",0,0],["ふ","fu",0,0],["へ","he",0,0],["ほ","ho",0,0]];
var medArray = [];    //[["ま","ma",0,0],["み","mi",0,0],["む","mu",0,0],["め","me",0,0],["も","mo",0,0]];
var hardArray = [];   //[["や","ya",0,0],["ゆ","yu",0,0],["よ","yo",0,0]];
grabRandArrVal(4, hirigana, easyArray);
//grabRandArrVal(1, hirigana, easyArray);
grabRandArrVal(3, hirigana, medArray);
grabRandArrVal(1, hirigana, hardArray);
//grabArrayValues(3, hirigana, easyArray);
//grabArrayValues(3, hirigana, medArray);
//grabArrayValues(3, hirigana, hardArray);
var displayIndex = [0,1];
displayIndex = RandArr(displayIndex);

var dataCharacter = "data Character";
var dataCorrect = "0";

function grabArrayValues(amount, startArr, endArr) {
  for (i = 0; i < amount; i++) {
    endArr.push(startArr[0]);
    startArr.splice(0,1);
  }
}
function grabRandArrVal(amount, startArr, endArr) {
  for (i=0; i< amount; i++) {
    var randNum = GenRN(startArr.length)
    endArr.push(startArr[randNum]);
    startArr.splice(randNum,1);
  }
}


var testArray1 = [];

grabRandArrVal(3, hirigana, testArray1);

splitMasterA.push(easyArray);  //occurs when game starts
splitMasterA.push(medArray);  //occurs when game starts
splitMasterA.push(hardArray); //occurs when game starts


var SplitMasterARand; //runs each time
SplitMasterARand = GenRN(splitMasterA.length);  // random 0 - 2, runs each time

var possValues = [0,1,2];
possValues = RandArr(possValues);
var tempHH;
var newQuestion = [];  // step 3

  if(medArray.length == 0 && hardArray.length >0 && easyArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [0,2];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (hardArray.length == 0  && medArray.length >0 && easyArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [0,1];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length == 0  && medArray.length >0 && hardArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [1,2];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length == 0  && medArray.length == 0 && hardArray.length >0) {
    SplitMasterARand = 2;
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length > 0  && medArray.length >0 && hardArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [0,1,2];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  }


//newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);  //runs each time

var concMasterA = [];   //runs each time
for (i = 0; i < splitMasterA.length; i++) {
  for (j = 0; j < splitMasterA[i].length; j++) {
    concMasterA.push(splitMasterA[i][j]);
  }
}

var masterAIndex;     //runs each time
for(i = 0; i < concMasterA.length; i++) {
  if(newQuestion[0][0] == concMasterA[i][0]) {
    masterAIndex = i;
  }
}
var newAnswerBank = [];
newAnswerBank.push(concMasterA[masterAIndex]);
concMasterA.splice(masterAIndex,1);

var concMasterARand;  //create var to store temp var values

concMasterARand = GenRN(concMasterA.length);
newAnswerBank.push(concMasterA[concMasterARand]);
concMasterA.splice(concMasterARand,1);

concMasterARand = GenRN(concMasterA.length);
newAnswerBank.push(concMasterA[concMasterARand]);
concMasterA.splice(concMasterARand,1);

newAnswerBank = RandArr(newAnswerBank);



function UpdateQues() {
  newQuestion.splice(0,1);
  for(i = splitMasterA.length; i>0; i--){
    splitMasterA.splice(i-1,1);
  }
  for(i = concMasterA.length; i>0; i--){
    concMasterA.splice(i-1,1);
  }
  for(i = newAnswerBank.length; i>0; i--){
    newAnswerBank.splice(i-1,1);
  }
  concMasterARand = "default";
  SplitMasterARand = "defulat";
  masterAIndex = "default";

  splitMasterA.push(easyArray);
  splitMasterA.push(medArray);
  splitMasterA.push(hardArray);

  //SplitMasterARand = GenRN(splitMasterA.length);  // random 0 - 2, runs each time !!original!!
  //tempHH = RandArr(possValues)[0];
  //SplitMasterARand = tempHH[0];
  possValues = [0,1,2];
  possValues = RandArr(possValues);
  SplitMasterARand = possValues[0];
  //newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);

  if(medArray.length == 0 && hardArray.length >0 && easyArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [0,2];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (hardArray.length == 0  && medArray.length >0 && easyArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [0,1];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length == 0  && medArray.length >0 && hardArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [1,2];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length == 0  && medArray.length == 0 && hardArray.length >0) {
    SplitMasterARand = 2;
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length > 0  && medArray.length == 0 && hardArray.length ==0) {
    SplitMasterARand = 0;
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  } else if (easyArray.length > 0  && medArray.length >0 && hardArray.length >0) {
    for(i = possValues.length; i >0; i--) {
      possValues.splice(i-1,1);
    }
    possValues = [0,1,2];
    possValues = RandArr(possValues);
    SplitMasterARand = possValues[0];
    newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);
    dataCharacter = newQuestion[0];
  }

  //newQuestion.push(splitMasterA[SplitMasterARand][GenRN(splitMasterA[SplitMasterARand].length)]);  //runs each time

  for (i = 0; i < splitMasterA.length; i++) {
    for (j = 0; j < splitMasterA[i].length; j++) {
      concMasterA.push(splitMasterA[i][j]);
    }
  }

  for(s = 0; s < concMasterA.length; s++) {
    if(newQuestion[0][0] == concMasterA[s][0]) {
      masterAIndex = s;
    }
  }

  newAnswerBank.push(concMasterA[masterAIndex]);
  concMasterA.splice(masterAIndex,1);
  var concMasterARand;  //create var to store temp var values

  concMasterARand = GenRN(concMasterA.length);
  newAnswerBank.push(concMasterA[concMasterARand]);
  concMasterA.splice(concMasterARand,1);

  concMasterARand = GenRN(concMasterA.length);
  newAnswerBank.push(concMasterA[concMasterARand]);
  concMasterA.splice(concMasterARand,1);

  newAnswerBank = RandArr(newAnswerBank);
}

var BG = {

  Color: '#FFFFFF',

  Paint: function(){

    ctx.fillStyle = this.Color;

    ctx.fillRect(0, 0, Width, Height);

  }

};


function GenRN(limit) {  //returns (limit - 1) values
  return Math.floor(Math.random() * limit);
}
function RandArr(array) {
  jumbArray = [];
  while(array.length >0) {
    randNum = GenRN(array.length);
    jumbArray.push(array[randNum]);
    array.splice(randNum,1);
  }
  return jumbArray;
}
function compVal(a, b) {
  if(a > b && highLow == "high") {
    gameHistory.push("loss");
    dealerCardX = 333;
    textResponse = "Wrong.           -"
    textResponse2= "It was ";
    answerState = false;
    return (-1);
  } else if(a > b && highLow == "low") {
    gameHistory.push("win");
    textResponse = "Correct.           +"
    textResponse2= "It was ";
    answerState = true;
    dealerCardX = 333;
    return 1;
  } else if(a < b && highLow == "low") {
    gameHistory.push("loss");
    textResponse = "Wrong.           -"
    textResponse2= "It was ";
    dealerCardX = 333;
    answerState = false;
    return (-1);
  } else if(a < b && highLow == "high") {
    gameHistory.push("win");
    textResponse = "Correct.           +"
    textResponse2= "It was ";
    answerState = true;
    dealerCardX = 333;
    return 1;
  } else if(a == b && highLow == "low") {
    gameHistory.push("loss");
    textResponse = "Wrong.           -"
    textResponse2= "It was ";
    answerState = false;
    dealerCardX = 333;
    return (-1);
  } else if(a == b && highLow == "high") {
    gameHistory.push("win");
    textResponse = "Correct.           +"
    textResponse2= "It was ";
    answerState = true;
    dealerCardX = 333;
    return 1;
  } else if(highLow == "") {
    return (-1);
  }
}
//highLow = "high";
//outcome = compVal(6,5);
//outcome = 5 * outcome;

function DrawCard(array) {
  //drawnCard = array[array.length -1];
  var card = [];
  card.push(array[array.length - 1])
  array.splice(array.length -1);
  return card;
}
function Discard(array1, array2) {
  array2.push(array1[array1.length-1]);
  array1.splice(array1.length-1,1);
}
function RebalanceArrays() {
  for(i = hardArray.length; i > 0; i --) {      //first check for hardArray to easyArray
    if(hardArray[i-1][3]/hardArray[i-1][2] == 1) {
      easyArray.push(hardArray[i-1].slice(0,4));
      hardArray.splice(i-1,1);
    }
  }
  for(i = hardArray.length; i > 0; i --) {      //2nd check for hardArray to medArray
    if(hardArray[i-1][3]/hardArray[i-1][2] > .5 && hardArray[i-1][2] > 8) {
      medArray.push(hardArray[i-1].slice(0,4));
      hardArray.splice(i-1,1);
    }
  }
  for(i = medArray.length; i > 0; i --) {     //1st check for medArray to easyArray
    if(medArray[i-1][3]/medArray[i-1][2] > .75 && medArray[i-1][2] > 8) {
      easyArray.push(medArray[i-1].slice(0,4));
      medArray.splice(i-1,1);
    }
  }
  for(i = medArray.length; i > 0; i --) {     //2nd check for medArray to hardArray
    if(medArray[i-1][3]/medArray[i-1][2] < .5 && medArray[i-1][2] > 0) {
      hardArray.push(medArray[i-1].slice(0,4));
      medArray.splice(i-1,1);
    }
  }
  for(i = easyArray.length; i > 0; i --) {      //1st check for easyArray to medArray
    if(easyArray[i-1][3]/easyArray[i-1][2] < .75 && easyArray[i-1][2] > 0) {
      medArray.push(easyArray[i-1].slice(0,4));
      easyArray.splice(i-1,1);
    }
  }
  if(hardArray.length == 0) {
    grabRandArrVal(1, hirigana, hardArray)
  }
}
function ResolvePt1(){
  if(mYcd > 285 && mYcd < 305 && mXcd > 270 && mXcd < 290){
    dealerCard = DrawCard(deck);
    //chips = chips + (parseFloat(keyIn) * compVal(drawnCard[0][0], dealerCard[0][0]));
    chips = chips + Math.round(keyIn * (power * compVal(drawnCard[0][0], dealerCard[0][0]))/100);
    adjusted =  Math.round(keyIn * (power * compVal(drawnCard[0][0], dealerCard[0][0]))/100);
    /*if (adjusted >= 0) {
      bonusPoints = adjusted - 100 + " bonus pts/ round";
    } else if (adjusted < 0) {
      bonusPoints = adjusted + 100 + " bonus";
    }*/
    //if(a1 == question && a1State == "on") {
    if(newAnswerBank[0][1] == newQuestion[0][1] && a1State == "on") {
      //CountAsked(question[0]);
      CountAsked2(newQuestion[0][0], easyArray);
      CountAsked2(newQuestion[0][0], medArray);
      CountAsked2(newQuestion[0][0], hardArray);
      CountCorrect2(newQuestion[0][0], easyArray);
      CountCorrect2(newQuestion[0][0], medArray);
      CountCorrect2(newQuestion[0][0], hardArray);
      RebalanceArrays();
      CountCorrect(question[0]);
      response = "correct";
      questionState = true;
      //answerState = true;
      power = Math.round(power * 1.1);
    }
    //if(a2 == question && a2State == "on") {
    if(newAnswerBank[1][1] == newQuestion[0][1] && a2State == "on") {
      //CountAsked(question[0]);
      CountCorrect(question[0]);
      CountAsked2(newQuestion[0][0], easyArray);
      CountAsked2(newQuestion[0][0], medArray);
      CountAsked2(newQuestion[0][0], hardArray);
      CountCorrect2(newQuestion[0][0], easyArray);
      CountCorrect2(newQuestion[0][0], medArray);
      CountCorrect2(newQuestion[0][0], hardArray);
      RebalanceArrays();
      response = "correct";
      //answerState = true;
      questionState = true;
      power = Math.round(power * 1.1);
    }
    //if(a3 == question && a3State == "on") {
    if(newAnswerBank[2][1] == newQuestion[0][1] && a3State == "on") {
      //CountAsked(question[0]);
      CountCorrect(question[0]);
      CountAsked2(newQuestion[0][0], easyArray);
      CountAsked2(newQuestion[0][0], medArray);
      CountAsked2(newQuestion[0][0], hardArray);
      CountCorrect2(newQuestion[0][0], easyArray);
      CountCorrect2(newQuestion[0][0], medArray);
      CountCorrect2(newQuestion[0][0], hardArray);
      RebalanceArrays();
      response = "correct";
      //answerState = true;
      questionState = true;
      power = Math.round(power * 1.1);
    }
    if(newQuestion[0][1] != newAnswerBank[0][1] && a1State == "on") {
      //CountAsked(question[0]);
      CountAsked2(newQuestion[0][0], easyArray);
      CountAsked2(newQuestion[0][0], medArray);
      CountAsked2(newQuestion[0][0], hardArray);
      RebalanceArrays();
      response = "wrong";
      //answerState = false;
      questionState = false;
      power = 100;
    }
    if(newQuestion[0][1] != newAnswerBank[1][1] && a2State == "on") {
      //CountAsked(question[0]);
      CountAsked2(newQuestion[0][0], easyArray);
      CountAsked2(newQuestion[0][0], medArray);
      CountAsked2(newQuestion[0][0], hardArray);
      RebalanceArrays();
      response = "wrong";
      //answerState = false;
      questionState = false;
      power = 100;
    }
    if(newQuestion[0][1] != newAnswerBank[2][1] && a3State == "on") {
      //CountAsked(question[0]);
      CountAsked2(newQuestion[0][0], easyArray);
      CountAsked2(newQuestion[0][0], medArray);
      CountAsked2(newQuestion[0][0], hardArray);
      RebalanceArrays();
      response = "wrong";
      //answerState = false;
      questionState = false;
      power = 100;
    }
    gameState = 2;
  }
  //chips = chips + parseFloat(keyIn)
  //chips = chips + compVal(drawnCard[0][0], dealerCard[0][0]);
  //multiplier = compVal(drawnCard[0][0], dealerCard[0][0])
  //chips = chips + (parseFloat(keyIn) * compVal(drawnCard[0][0], dealerCard[0][0]));

}
function ResolvePt2(){

//dataCharacter dataCorrect

//window.location = 'www.google.com';

//<a href="/create_favorite">create favorite</a>

/*
<form action="/create_favorite" method="post" data-remote="true">
<input name="authenticity_token" type="hidden" value="<%= form_authenticity_token %>">

      <div class="form-group">
        <label for="dish_id" class="control-label">
          Dish
        </label>
          <%= select_tag(:dish_id, options_from_collection_for_select(Dish.order("name ASC"), :id, :name, @favorite.dish_id), :class => "form-control") %>

      </div>

</form>
*/

$.ajax({
  method: "POST",
  url: "/create_favorite",
  //data-remote:  "TRUE",
  data: { name: "John", location: "Boston" }
})

//$.post('/create_favorite', {xml: yourXMLString });

alert('hello');

$("p").hide();
/*
  .done(function( msg ) {
    alert( "Data Saved: " + msg );
  });*/

/* $.ajax({
    // The URL for the request
    url: "post.php",
    // The data to send (will be converted to a query string)
    data: {
        id: 123
    },
    // Whether this is a POST or GET request
    type: "GET",
    // The type of data we expect back
    dataType : "json",
    // Code to run if the request succeeds;
    // the response is passed to the function
    success: function( json ) {
        //$( "<h1>" ).text( json.title ).appendTo( "body" );
        //$( "<div class=\"content\">").html( json.html ).appendTo( "body" );
    },
    // Code to run if the request fails; the raw request and
    // status codes are passed to the function
    error: function( xhr, status, errorThrown ) {
        alert( "Sorry, there was a problem!" );
        //console.log( "Error: " + errorThrown );
        //console.log( "Status: " + status );
        //console.dir( xhr );
    },
    // Code to run regardless of success or failure
    complete: function( xhr, status ) {
        alert( "The request is complete!" );
    }
}); */
  //chips = chips + (parseFloat(keyIn) * compVal(drawnCard[0][0], dealerCard[0][0]));
  //discard.push(drawnCard);
  answerState = undefined;
  questionState = undefined;
  highLow = "";
  highLowX = 325;
  dealerCardX = 325;
  textResponse = "";
  textResponse2 = "";
  bonusPoints = "";

  discard.push(drawnCard.slice(0,1));
  drawnCard.splice(0,1);
  discard.push(dealerCard.slice(0,1));
  dealerCard.splice(0,1);
  //discard.push(dealerCard);
  //dealerCard.splice(0,1);
  drawnCard = DrawCard(deck);
  gameState = 1;
  keyIn = 100;
  a1State = "off";
  response = "";
  for (i = 0; i < demo.length; i++) {
    demo.splice(0,1);
  }
  demo = CreateQ(charArray);
  demo2 = demo[1][2][1];
  question = demo[0][0];
  questionDisplay = question[0][0];
  a1State = "off";
  a2State = "off";
  a3State = "off";

  a1 = demo[1][0];
  a1Display = a1[1];
  a2 = demo[1][1];
  a2Display = a2[1];
  a3 = demo[1][2];
  a3Display = a3[1];
  //RebalanceArrays();
  UpdateQues();
  dataCorrect = 0;
  adjusted = "";
}
function HiOrLow(MX, MY) {
  if(MX < 290 && MX >275 && MY < 150 && MY > 135) {
    highLow = "low"
    highLowX = 265;
  } else if(MX < 315 && MX > 300 && MY < 150 && MY > 135) {
    highLow = "high"
    highLowX = 265;
  }
}


function CountAsked(question) {
  for(i = 0; i < charArray.length; i++) {
    if (charArray[i][0] == question) {
      charArray[i][2]++;
    }
  }
}
function CountAsked2(question, array) {
  for(i = 0; i < array.length; i++) {
    if (array[i][0] == question) {
      array[i][2]++;
    }
  }
}
function CountCorrect(question) {
  for(i = 0; i < charArray.length; i++) {
    if (charArray[i][0] == question) {
      charArray[i][3]++;
    }
  }
}
function CountCorrect2(question, array) {
  for(i = 0; i < array.length; i++) {
    if (array[i][0] == question) {
      array[i][3]++;
      dataCorrect = 1;
    }
  }
}




RebalanceArrays();

function drawLabels(){
if(gameOver == false) {
/*
  if(answerScreen == true && answerState == true) {
    ctx.fillStyle = "#00FF00";    //green #00FF00
    ctx.fillRect(highLowX, 160, 40, 12);}
  if(answerScreen == true && answerState == false) {
    ctx.fillStyle = "#FF0000";
    ctx.fillRect(highLowX, 160, 40, 12);}
  if(questionFilter == true && questionState == true) {
    ctx.fillStyle = "#00FF00";
    ctx.fillRect(345, 196, 40, 12);}
  if(questionFilter == true && questionState == false) {
    ctx.fillStyle = "#FF0000";
    ctx.fillRect(345, 196, 40, 12);}
*/
  ctx.fillStyle = "#200";
  ctx.font = Height/38 +"px "+ "Calibri";
/*
  ctx.fillText(testArray1, 50,350);
  ctx.fillText(hirigana, 50, 370);
  ctx.fillText("newQuestion " + newQuestion, 300, 15);
  ctx.fillText("newQuestion[0][1] " + newQuestion[0][1], 300, 30);
  ctx.fillText("newAnswerBank " + newAnswerBank, 300, 45);
  ctx.fillText("newAnswerBank[0][1] " + newAnswerBank[0][1], 300, 60);
  ctx.fillText("result " + result, 500, 60);
  ctx.fillText("displayIndex " + displayIndex, 500, 75);
  ctx.fillText("gameState " + gameState, 300, 75)

*/
  /*
  for(i = 0; i<deck.length; i++) {
    j = 0;
    if(i > 12) {
      j = 1;
    }
    if(i > 25) {
      j = 2;
    }
    if(i > 38) {
      j = 3;
    }
    ctx.fillText(deck[i],10+ 50*j,20+20*i - 260*j)
  }
  for(i = 0; i<discard.length; i++) {
    j = 0;
    if(i > 12) {
      j = 1;
    }
    if(i > 25) {
      j = 2;
    }
    if(i > 38) {
      j = 3;
    }
    ctx.fillText(discard[i],600+ 50*j,70+20*i - 260*j)
  }*/

  ctx.fillText("dataCharacter: " + dataCharacter, 200, 50);
  ctx.fillText("dataCorrect : " + dataCorrect, 200, 65);

  ctx.fillText("easyArray", 500, 13);
  for(i = 0; i < easyArray.length; i ++) {
    ctx.fillText(easyArray[i][0] + " " + easyArray[i][1] + " " + easyArray[i][2] + " " + easyArray[i][3], 500, 26 + 13 *i)
  }
  ctx.fillText("medArray", 600, 13);
  for(i = 0; i < medArray.length; i ++) {
    ctx.fillText(medArray[i][0] + " " + medArray[i][1] + " " + medArray[i][2] + " " + medArray[i][3], 600, 26 + 13 *i)
  }
  ctx.fillText("hardArray", 700, 13);
  for(i = 0; i < hardArray.length; i ++) {
    ctx.fillText(hardArray[i][0] + " " + hardArray[i][1] + " " + hardArray[i][2] + " " + hardArray[i][3], 700, 26 + 13 *i)
  }
  ctx.fillText(highLow, highLowX, 170);
  ctx.fillText(drawnCard+".", 150, 170);
  ctx.fillText("Bet next card", 190, 170);
  ctx.fillText("low or high?", 190, 185);
  ctx.fillText(dealerCard, dealerCardX, 185);
  ctx.fillText(textResponse, 300,170);
  ctx.fillText(textResponse2, 300, 185);

  ctx.fillText("Step 1:  Bet high or Low", 15, 100);
  ctx.fillText("Step 2:  Select answer", 15, 115);
  ctx.fillText("Step 3:  Click contine", 15, 130);

  //ctx.fillText(questionDisplay, 365,191);
  ctx.fillText(newQuestion[0][displayIndex[0]], 150, 220);
  ctx.fillText(response, 300, 220);
  //ctx.fillText(bonusPoints, 367, 220);

  ctx.fillText(a1State, 250, 220);
  ctx.fillText(a2State, 250, 245);
  ctx.fillText(a3State, 250, 270);

  //ctx.fillText(a1Display, 310, 245);
  ctx.fillText(newAnswerBank[0][displayIndex[1]], 190, 220);
  //ctx.fillText(a2Display, 370, 245);
  ctx.fillText(newAnswerBank[1][displayIndex[1]], 190, 245);
  //ctx.fillText(a3Display, 430, 245);
  ctx.fillText(newAnswerBank[2][displayIndex[1]], 190, 270);

  if (adjusted != "") {
    ctx.fillText(Math.abs(adjusted) + " pts!", 380, 170);
  }

  ctx.fillText("Power: " + power, 350, 365);
  ctx.fillText("chips: " + chips, 450, 170);

  ctx.fillText("Bet", 265, 110);
  ctx.fillText("low", 265, 125);
  ctx.fillText("Bet", 310, 110);
  ctx.fillText("high", 310, 125);
  ctx.fillText("Click here to continue", 150, 300);

  ctx.fillRect(270, 285, 20,20);

  ctx.fillRect(225, 210, 15, 15);
  ctx.fillRect(225, 235, 15, 15);
  ctx.fillRect(225, 260, 15, 15);

  ctx.fillRect(275, 135, 15, 15);
  ctx.fillRect(300, 135, 15, 15);
  //ctx.fillText("question: " + question[0], 10, 420);
  //ctx.fillText("charArray[0]:" + charArray[0], 10, 390);
/*
  for(a = 0; a<gameHistory.length; a++) {
    ctx.fillText("gameHistory: " + gameHistory[a], 700, 20 + 20*a)
  }
  //ctx.fillText(now, 300, 100);
  //ctx.fillText("difference " + difference, 300, 20);
  ctx.fillText("mouse x " + mXcd, 10, 280);
  ctx.fillText("mouse y " + mYcd, 10, 300);
  ctx.fillText("mouse click counter: " + counter, 10, 320);
  ctx.fillText("keyIn: " + keyIn, 10, 340);
  ctx.fillText("check: " + check, 10, 360);
  ctx.fillText("demo: " + demo, 10, 380);
  ctx.fillText("demo2: " + demo2, 10, 400);
  ctx.fillText("question: " + question, 10, 420);
  ctx.fillText("a1: " + a1, 150, 280);
  ctx.fillText("a2: " + a2, 150, 300);
  ctx.fillText("a3: " + a3, 150, 320);
  ctx.fillText("gameState: " + gameState, 150, 340);
  //ctx.fillText("outcome: " + outcome, 500, 160);
  //ctx.fillText("possValues[0]: " + possValues[0], 250, 15);
  //ctx.fillText("SplitMasterARand: " + SplitMasterARand, 250, 30);
  //ctx.fillText("masterAIndex: " + masterAIndex, 100, 220);
  for(i = 0; i<deck.length; i++) {
    j = 0;
    if(i > 12) {
      j = 1;
    }
    if(i > 25) {
      j = 2;
    }
    if(i > 38) {
      j = 3;
    }
    ctx.fillText(deck[i],10+ 50*j,20+20*i - 260*j)
  }
  for(i = 0; i<discard.length; i++) {
    j = 0;
    if(i > 12) {
      j = 1;
    }
    if(i > 25) {
      j = 2;
    }
    if(i > 38) {
      j = 3;
    }
    ctx.fillText(discard[i],600+ 50*j,20+20*i - 260*j)
  }
*/
} else {
  ctx.fillStyle = "#200";
  ctx.font = Height/38 +"px "+ "Calibri";
  ctx.fillText("you win!", 30, 30);
  ctx.fillText("your score: " + chips, 30, 45);
}

}
function Clicked(x, y, l, w) {
  if(mXcd > x &&
  mXcd < x + w &&
  mYcd > y &&
  mYcd < y + l) {
    counter += 100
    return true;
  }
}

function MouseMove(e){
  e = e || window.event;
  var target = e.target || e.srcElement;
  var rect = target.getBoundingClientRect();
  mXcd = e.clientX - rect.left;
  mYcd = e.clientY - rect.top;
}
function OnClick(e){

/* $.ajax({
    // The URL for the request
    url: "post.php",
    // The data to send (will be converted to a query string)
    data: {
        id: 123
    },
    // Whether this is a POST or GET request
    type: "GET",
    // The type of data we expect back
    dataType : "json",
    // Code to run if the request succeeds;
    // the response is passed to the function
    success: function( json ) {
        //$( "<h1>" ).text( json.title ).appendTo( "body" );
        //$( "<div class=\"content\">").html( json.html ).appendTo( "body" );
    },
    // Code to run if the request fails; the raw request and
    // status codes are passed to the function
    error: function( xhr, status, errorThrown ) {
        alert( "Sorry, there was a problem!" );
        //console.log( "Error: " + errorThrown );
        //console.log( "Status: " + status );
        //console.dir( xhr );
    },
    // Code to run regardless of success or failure
    complete: function( xhr, status ) {
        alert( "The request is complete!" );
    }
}); */

  if(gameOver == false) {
    //check = typeof keyIn;
    if(Clicked(225, 210, 15, 15) && a1State == "off") {
      a1State = "on";
      a2State = "off";
      a3State = "off";
    } else {
      if(Clicked(225, 210, 15, 15) && a1State == "on") {
        a1State = "off";
      }
    }
    if(Clicked(225, 235, 15, 15) && a2State == "off") {
      a2State = "on";
      a1State = "off";
      a3State = "off";
    } else {
      if(Clicked(225, 235, 15, 15) && a2State == "on") {
        a2State = "off";
      }
    }
    if(Clicked(225, 260, 15, 15) && a3State == "off") {
      a3State = "on";
      a1State = "off";
      a2State = "off";
    } else {
      if(Clicked(225, 260, 15, 15) && a3State == "on") {
        a3State = "off";
      }
    }
    //Clicked(300, 250, 30, 30)
    HiOrLow(mXcd, mYcd)
    counter++;
    if(gameState == 1) {
      ResolvePt1();
    } else if (gameState ==2) {
      ResolvePt2();
    }
  }

}
function KeyIsPressed(e){
  var keyPressed = String.fromCharCode(event.keyCode);
  if(keyIn == undefined) {
    keyIn = keyPressed
    //keyIn = 0;
  } else {
    keyIn +=keyPressed;
  }
  check = typeof(bet);
}
function KeyDownDown(e){
  var keyDown = event.keyCode;
  if(keyDown == 8) {
    keyIn = keyIn.slice(0,keyIn.length-1);
  }
}

canvas.addEventListener("mousemove", MouseMove, true);
window.addEventListener("mousedown", OnClick, true);
window.addEventListener("keypress", KeyIsPressed, true);
window.addEventListener("keydown", KeyDownDown, true);

window.requestAnimFrame = (function(){

  return window.requestAnimationFrame

  || window.webkitRequestAnimationFrame

  || window.mozRequestAnimationFrame

  || window.oRequestAnimationFrame

  || window.msRequestAnimationFrame

  || function( callback ){ return window.setTimeout(callback, FPS);
  };
}

)();


window.cancelRequestAnimFrame = (function() {

  return window.cancelAnimationFrame

    || window.webkitCancelRequestAnimationFrame
    || window.mozCancelRequestAnimationFrame

    || window.oCancelRequestAnimationFrame

    || window.msCancelRequestAnimationFrame
      || clearTimeout }

)();

function Paint(){

  BG.Paint();

}

function Loop(){

  if (deck.length == 0) {
    deck= RandArr(discard);
    gameOver = true;
  }
  init = requestAnimFrame(Loop);

  now = Date.now();
  difference = now - then;
  then = Date.now();
  Paint();
  drawLabels();
};
function NewGame(){

  deck = RandArr(deck);
  gameState =1;
  //DrawCard(deck);
  drawnCard = DrawCard(deck);
  keyIn = 100;
  gameTimeStart = Date.now();
  then = Date.now();
  Loop();

}



if (newQuestion[0][1] == newAnswerBank[0][1]) {
  result = "yes!"
}
NewGame();


</script>
</head>

<!-- Validation failure messages -->
<script>
    $(document).ready(function(){
         $("button").click(function(){
            $("p").hide();
         });
     });
</script>


<button>Click me</button>

<p>
  paragraph to hide
</p>

<% if @favorite.errors.any? %>
  <% @favorite.errors.full_messages.each do |message| %>
    <div class="alert alert-dismissable alert-danger">
      <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
      <%= message %>
    </div>
  <% end %>
<% end %>

<div class="page-header">
  <h3>Add Favorite</h3>
</div>

<div class="row">
  <div class="col-md-12">
    <form action="/create_favorite" method="post" data-remote="true">
      <!-- Hidden input for authenticity token to protect from forgery -->
      <input name="authenticity_token" type="hidden" value="<%= form_authenticity_token %>">

      <!-- Label and input for user_id -->
      <div class="form-group">
        <label for="user_id" class="control-label">
          User
        </label>
          <%= select_tag(:user_id, options_from_collection_for_select(User.order("username ASC"), :id, :username, @favorite.user_id), :class => "form-control") %>
        <!-- <input type="text" id="user_id" name="user_id" placeholder="User" class="form-control" value="<%#= @favorite.user_id %>"> -->
      </div>

      <!-- Label and input for dish_id -->
      <div class="form-group">
        <label for="dish_id" class="control-label">
          Dish
        </label>
          <%= select_tag(:dish_id, options_from_collection_for_select(Dish.order("name ASC"), :id, :name, @favorite.dish_id), :class => "form-control") %>

<!--         <input type="text" id="dish_id" name="dish_id" placeholder="Dish" class="form-control" value="<%#= @favorite.dish_id %>"> -->
      </div>

      <!-- Label and input for venue_id -->
      <div class="form-group">
        <label for="venue_id" class="control-label">
          Venue
        </label>
          <%= select_tag(:venue_id, options_from_collection_for_select(Venue.order("name ASC"), :id, :name, @favorite.venue_id), :class => "form-control") %>

<!--         <input type="text" id="venue_id" name="venue_id" placeholder="Venue" class="form-control" value="<%#= @favorite.venue_id %>" -->>
      </div>

      <!-- Label and input for notes -->
      <div class="form-group">
        <label for="notes" class="control-label">
          Notes
        </label>
        <textarea id="notes" name="notes" placeholder="Notes" class="form-control" rows="3"><%= @favorite.notes %></textarea>
      </div>

      <button class="btn btn-success">
        Create Favorite
      </button>
      or
      <a href="/favorites">Cancel</a>
    </form>
  </div>
</div>
